/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.rwtodd.soundfonts;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.Optional;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Instrument;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Soundbank;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

public class Cmd extends JFrame implements ActionListener {

    private final LoadedBankPanel bank;
    private final NoteSelector noteSel;

    public Cmd() throws MidiUnavailableException {
        super("Sound Font Explorer");

        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        // setup menus ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        final var menuBar = new JMenuBar();
        final var fileMenu = new JMenu("File");

        final var openItem = new JMenuItem("Open", KeyEvent.VK_O);
        openItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openItem.addActionListener(this);
        fileMenu.add(openItem);

        final var defaultItem = new JMenuItem("Load Default", KeyEvent.VK_D);
        defaultItem.addActionListener(this);
        fileMenu.add(defaultItem);

        final var exitItem = new JMenuItem("Exit", KeyEvent.VK_X);
        exitItem.addActionListener(this);
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        this.setJMenuBar(menuBar);

        // setup contents ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        bank = new LoadedBankPanel();
        add(bank.getUserInterface(), BorderLayout.CENTER);

        noteSel = new NoteSelector();
        add(noteSel.getUserInterface(), BorderLayout.EAST);

        bank.addPropertyChangeListener(
                evt -> {
                    if (evt.getPropertyName().equalsIgnoreCase("selectedInstrument")) {
                        noteSel.setInstrument((Instrument) evt.getNewValue());
                    } else if (evt.getPropertyName().equalsIgnoreCase("soundbank")) {
                        noteSel.setSoundbank((Soundbank)evt.getNewValue());
                    }
                });

        pack();
        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                new Cmd();
            } catch (Exception e) {
                System.err.println(e);
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "Open" -> {
                final var lastDir = getLastDirectory().orElse(".");
                final var fc = new JFileChooser(lastDir);
                fc.showOpenDialog(this);
                final var selected = fc.getSelectedFile();
                try {
                    loadSoundFont(selected);
                } catch (Exception ex) {
                    return;
                }

                final var selectedDir = selected.getAbsoluteFile().getParent();
                if (!lastDir.equals(selectedDir)) {
                    setLastDirectory(selectedDir);
                }
            }
            case "Load Default" -> {
                try {
                    loadSoundFont();
                } catch (Exception ex) {
                    /* popup maybe? */
                }
            }
            case "Exit" -> {
                noteSel.close();
                dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
            }
            default -> {
            }
        }
    }

    /**
     * Retrieve the last directory the user used. User preferences (java.prefs
     * module) are consulted for this. If nothing is stored there, then null is
     * returned.
     *
     * @return The name of the last directory used by the program.
     */
    private Optional<String> getLastDirectory() {
        final var prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        try {
            return Optional.ofNullable(prefs.get("LastDir", null));
        } catch (Exception e) {
            // prefs exceptions aren't worth causing trouble for the user.
            return Optional.empty();
        }
    }

    /**
     * Save the user's preference for target directory. User preferences
     * (java.prefs module) are used as a backing store.
     *
     * @parm last the last directory set by the user.
     */
    private void setLastDirectory(final String last) {
        final var prefs = java.util.prefs.Preferences.userNodeForPackage(this.getClass());
        try {
            prefs.put("LastDir", last);
        } catch (Exception e) {
            // prefs exceptions aren't worth causing trouble for the user.
        }
    }

    private void loadSoundFont(final File selected) throws IOException, InvalidMidiDataException {
        final var soundbank = MidiSystem.getSoundbank(selected);
        bank.setSoundbank(soundbank);
    }

    private void loadSoundFont() throws IOException, InvalidMidiDataException, MidiUnavailableException {
        final var soundbank = MidiSystem.getSynthesizer().getDefaultSoundbank();
        if (soundbank != null) {
            bank.setSoundbank(soundbank);
        }
    }

}
